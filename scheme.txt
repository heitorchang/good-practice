# BiwaScheme

<!DOCTYPE html>
<html>
  <body>

    BiwaScheme console:
    <pre id="bs-console"></pre>

    <script src="biwascheme-0.7.4.js"></script>

    <script type="text/biwascheme">
    (load "myfun.scm")  ;; load another file

    (define wheels 2)
    (define cars 0)

    (display "Hello, BiwaScheme!")
    (display (string-append "Pi approx." (number->string (/ 355 113))))

    (set! wheels 4)  ;; not good practice to use assignment
    (set! cars 20)

    (display "Car wheels:")
    (display (* cars wheels))

    (set! cars 16)

    (display "Car wheels:")
    (display (* cars wheels))
    </script>
  </body>
</html>


# Serve using hot reload

sudo npm install -g live-server

Run in the BiwaScheme project directory:
live-server


# Notes

* The empty list, printed as () is the null pointer value.
* null? checks a value for ()
* It must be written as '()
* eq? checks if two things are the same object.
* quote doesn't create a new data structure each time it's called, so structures created with quote should not be modified.
* On the other hand, list does create new data structures.


# Chicken Scheme

In the REPL, # returns the last value. #1, #2, etc. correspond to the value of the expression at that index.


# HTML Canvas with BiwaScheme

  <body>
    Canvas<br>
    <canvas id="canvas" width="600" height="400"></canvas>

    BiwaScheme console:
    <pre id="bs-console"></pre>

    <script src="biwascheme-0.7.4.js"></script>

    <script type="text/biwascheme">
(define *canvas* (dom-element "#canvas"))
(define *ctx* (js-invoke *canvas* "getContext" "2d"))

(define (fill)
  (js-set! *ctx* "fillStyle" "#99f"))

(define (sq x y side)
  (js-invoke *ctx* "fillRect" x y side side))

(define (clr)
  (js-invoke *ctx* "clearRect" 0 0 600 400))

(fill)
(for-each (lambda (x) (sleep 0.0033) (clr) (sq x x 30)) (iota 351 0 1))

(js-invoke *ctx* "stroke")
    </script>
  </body>
